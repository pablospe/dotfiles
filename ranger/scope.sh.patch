--- scope.sh	2021-08-06 13:47:21.172284224 +0200
+++ scope.sh_last2	2021-08-06 13:50:07.836019353 +0200
@@ -128,9 +128,9 @@
     local mimetype="${1}"
     case "${mimetype}" in
         ## SVG
-        # image/svg+xml|image/svg)
-        #     convert -- "${FILE_PATH}" "${IMAGE_CACHE_PATH}" && exit 6
-        #     exit 1;;
+        image/svg+xml|image/svg)
+            convert -- "${FILE_PATH}" "${IMAGE_CACHE_PATH}" && exit 6
+            exit 1;;
 
         ## DjVu
         # image/vnd.djvu)
@@ -154,20 +154,20 @@
             exit 7;;
 
         ## Video
-        # video/*)
-        #     # Thumbnail
-        #     ffmpegthumbnailer -i "${FILE_PATH}" -o "${IMAGE_CACHE_PATH}" -s 0 && exit 6
-        #     exit 1;;
+        video/*)
+            # Thumbnail
+            ffmpegthumbnailer -i "${FILE_PATH}" -o "${IMAGE_CACHE_PATH}" -s 0 && exit 6
+            exit 1;;
 
         ## PDF
-        # application/pdf)
-        #     pdftoppm -f 1 -l 1 \
-        #              -scale-to-x "${DEFAULT_SIZE%x*}" \
-        #              -scale-to-y -1 \
-        #              -singlefile \
-        #              -jpeg -tiffcompression jpeg \
-        #              -- "${FILE_PATH}" "${IMAGE_CACHE_PATH%.*}" \
-        #         && exit 6 || exit 1;;
+        application/pdf)
+            pdftoppm -f 1 -l 1 \
+                     -scale-to-x "${DEFAULT_SIZE%x*}" \
+                     -scale-to-y -1 \
+                     -singlefile \
+                     -jpeg -tiffcompression jpeg \
+                     -- "${FILE_PATH}" "${IMAGE_CACHE_PATH%.*}" \
+                && exit 6 || exit 1;;
 
 
         ## ePub, MOBI, FB2 (using Calibre)
@@ -203,40 +203,40 @@
 
         ## Preview archives using the first image inside.
         ## (Very useful for comic book collections for example.)
-        # application/zip|application/x-rar|application/x-7z-compressed|\
-        #     application/x-xz|application/x-bzip2|application/x-gzip|application/x-tar)
-        #     local fn=""; local fe=""
-        #     local zip=""; local rar=""; local tar=""; local bsd=""
-        #     case "${mimetype}" in
-        #         application/zip) zip=1 ;;
-        #         application/x-rar) rar=1 ;;
-        #         application/x-7z-compressed) ;;
-        #         *) tar=1 ;;
-        #     esac
-        #     { [ "$tar" ] && fn=$(tar --list --file "${FILE_PATH}"); } || \
-        #     { fn=$(bsdtar --list --file "${FILE_PATH}") && bsd=1 && tar=""; } || \
-        #     { [ "$rar" ] && fn=$(unrar lb -p- -- "${FILE_PATH}"); } || \
-        #     { [ "$zip" ] && fn=$(zipinfo -1 -- "${FILE_PATH}"); } || return
-        #
-        #     fn=$(echo "$fn" | python -c "import sys; import mimetypes as m; \
-        #             [ print(l, end='') for l in sys.stdin if \
-        #               (m.guess_type(l[:-1])[0] or '').startswith('image/') ]" |\
-        #         sort -V | head -n 1)
-        #     [ "$fn" = "" ] && return
-        #     [ "$bsd" ] && fn=$(printf '%b' "$fn")
-        #
-        #     [ "$tar" ] && tar --extract --to-stdout \
-        #         --file "${FILE_PATH}" -- "$fn" > "${IMAGE_CACHE_PATH}" && exit 6
-        #     fe=$(echo -n "$fn" | sed 's/[][*?\]/\\\0/g')
-        #     [ "$bsd" ] && bsdtar --extract --to-stdout \
-        #         --file "${FILE_PATH}" -- "$fe" > "${IMAGE_CACHE_PATH}" && exit 6
-        #     [ "$bsd" ] || [ "$tar" ] && rm -- "${IMAGE_CACHE_PATH}"
-        #     [ "$rar" ] && unrar p -p- -inul -- "${FILE_PATH}" "$fn" > \
-        #         "${IMAGE_CACHE_PATH}" && exit 6
-        #     [ "$zip" ] && unzip -pP "" -- "${FILE_PATH}" "$fe" > \
-        #         "${IMAGE_CACHE_PATH}" && exit 6
-        #     [ "$rar" ] || [ "$zip" ] && rm -- "${IMAGE_CACHE_PATH}"
-        #     ;;
+        application/zip|application/x-rar|application/x-7z-compressed|\
+            application/x-xz|application/x-bzip2|application/x-gzip|application/x-tar)
+            local fn=""; local fe=""
+            local zip=""; local rar=""; local tar=""; local bsd=""
+            case "${mimetype}" in
+                application/zip) zip=1 ;;
+                application/x-rar) rar=1 ;;
+                application/x-7z-compressed) ;;
+                *) tar=1 ;;
+            esac
+            { [ "$tar" ] && fn=$(tar --list --file "${FILE_PATH}"); } || \
+            { fn=$(bsdtar --list --file "${FILE_PATH}") && bsd=1 && tar=""; } || \
+            { [ "$rar" ] && fn=$(unrar lb -p- -- "${FILE_PATH}"); } || \
+            { [ "$zip" ] && fn=$(zipinfo -1 -- "${FILE_PATH}"); } || return
+
+            fn=$(echo "$fn" | python -c "import sys; import mimetypes as m; \
+                    [ print(l, end='') for l in sys.stdin if \
+                      (m.guess_type(l[:-1])[0] or '').startswith('image/') ]" |\
+                sort -V | head -n 1)
+            [ "$fn" = "" ] && return
+            [ "$bsd" ] && fn=$(printf '%b' "$fn")
+
+            [ "$tar" ] && tar --extract --to-stdout \
+                --file "${FILE_PATH}" -- "$fn" > "${IMAGE_CACHE_PATH}" && exit 6
+            fe=$(echo -n "$fn" | sed 's/[][*?\]/\\\0/g')
+            [ "$bsd" ] && bsdtar --extract --to-stdout \
+                --file "${FILE_PATH}" -- "$fe" > "${IMAGE_CACHE_PATH}" && exit 6
+            [ "$bsd" ] || [ "$tar" ] && rm -- "${IMAGE_CACHE_PATH}"
+            [ "$rar" ] && unrar p -p- -inul -- "${FILE_PATH}" "$fn" > \
+                "${IMAGE_CACHE_PATH}" && exit 6
+            [ "$zip" ] && unzip -pP "" -- "${FILE_PATH}" "$fe" > \
+                "${IMAGE_CACHE_PATH}" && exit 6
+            [ "$rar" ] || [ "$zip" ] && rm -- "${IMAGE_CACHE_PATH}"
+            ;;
     esac
 
     # openscad_image() {
